<Type Name="BaseLock" FullName="DbLinq.Util.BaseLock">
  <TypeSignature Language="C#" Value="public abstract class BaseLock : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseLock extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:DbLinq.Util.BaseLock" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BaseLock&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type BaseLock = class&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BaseLock abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BaseLock (System.Threading.ReaderWriterLockSlim locks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ReaderWriterLockSlim locks) cil managed" />
      <MemberSignature Language="DocId" Value="M:DbLinq.Util.BaseLock.#ctor(System.Threading.ReaderWriterLockSlim)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (locks As ReaderWriterLockSlim)" />
      <MemberSignature Language="F#" Value="new DbLinq.Util.BaseLock : System.Threading.ReaderWriterLockSlim -&gt; DbLinq.Util.BaseLock" Usage="new DbLinq.Util.BaseLock locks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BaseLock(System::Threading::ReaderWriterLockSlim ^ locks);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="locks" Type="System.Threading.ReaderWriterLockSlim" />
      </Parameters>
      <Docs>
        <summary>Initializes a new instance of the <see cref="BaseLock" /> class using the specified reader-writer lock.</summary>
        <param name="locks">The <see cref="System.Threading.ReaderWriterLockSlim" /> object.</param>
      </Docs>
    </Member>
    <Member MemberName="_Locks">
      <MemberSignature Language="C#" Value="protected System.Threading.ReaderWriterLockSlim _Locks;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Threading.ReaderWriterLockSlim _Locks" />
      <MemberSignature Language="DocId" Value="F:DbLinq.Util.BaseLock._Locks" />
      <MemberSignature Language="VB.NET" Value="Protected _Locks As ReaderWriterLockSlim " />
      <MemberSignature Language="F#" Value="val mutable _Locks : System.Threading.ReaderWriterLockSlim" Usage="DbLinq.Util.BaseLock._Locks" />
      <MemberSignature Language="C++ CLI" Value="protected: System::Threading::ReaderWriterLockSlim ^ _Locks;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ReaderWriterLockSlim</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A thread-safe data structure that uses a reader-writer locking strategy for thread synchronization.</summary>
        <remarks>This locking strategy allows multiple threads to read a resource simultaneously, but requires that any thread wishing to write to the resource must wait until all existing readers have released their locks.</remarks>
        <value>The thread-safe data structure that uses a reader-writer locking strategy for thread synchronization.</value>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public abstract void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:DbLinq.Util.BaseLock.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="baseLock.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
